{"remainingRequest":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/src/views/curso/Tema1.vue?vue&type=template&id=52a2803b&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/src/views/curso/Tema1.vue","mtime":1753761498627},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/U2_Pensamiento_Estrategico_Prospectivo_Posgrado/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}